services:
  init_volume:
    # This service initializes the volume with the correct permissions
    # to ensure that the GCN stream can write to it.
    # It runs only once and then exits.
    image: busybox
    env_file:
      - .env
    command: ["sh", "-c", "chown -R ${PROJECT_UID}:${PROJECT_GID} /shared-tmp"]
    volumes:
      - e2e_volume:/shared-tmp
    restart: "no"

  gcn_stream:
    image: grandma_gcn_app
    env_file:
      - .env
    build:
      context: ./
      dockerfile: dockerfile
      target: base
      args:
        - USR=${USR}
        - USR_GROUP=${USR_GROUP}
        - PROJECT_UID=${PROJECT_UID}
        - PROJECT_GID=${PROJECT_GID}
    user: "${PROJECT_UID}:${PROJECT_GID}"
    volumes:
      - ../grandma-gcn:/home/${USR}/code/
      - e2e_volume:/shared-tmp
    depends_on:
      - celery_worker
      - init_volume
      - db
    command: tail -F anything

  redis:
    image: redis:6.0.5
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

  celery_worker:
    image: grandma_gcn_app
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      - ../grandma-gcn:/home/${USR}/code/
      - e2e_volume:/shared-tmp
    entrypoint:
      [
        "/bin/sh",
        "-c",
        "pip install --no-cache-dir -e /home/${USR}/code && exec python -m celery -A grandma_gcn.worker.celery_app worker --loglevel=DEBUG",
      ]

  db:
    image: postgres
    restart: unless-stopped
    ports:
        - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
        - pgdata:/var/lib/postgresql/data
        - ./scripts/init_grandma_gcn_db.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  e2e_volume:
    name: "e2e_volume"
  pgdata:
    name: "grandmagcn_pgdata"

from pathlib import Path
import uuid

from grandma_gcn.gcn_stream.gw_alert import GW_alert
from grandma_gcn.worker.celery_app import celery
import logging

from grandma_gcn.worker.gwemopt_init import init_gwemopt


def setup_task_logger(task_name: str) -> logging.Logger:
    """
    Configure a logger to log into a separate file for each task.

    Parameters
    ----------
    task_name : str
        The name of the task.

    Returns
    -------
    logging.Logger
        The configured logger.
    """
    id_task = uuid.uuid4()
    logger = logging.getLogger(f"gcn_stream.consumer.worker.{id_task}")
    logger.setLevel(logging.INFO)

    # Create a file handler for the task
    log_file = Path(f"task_logs/{task_name}_{id_task}.log")
    log_file.parent.mkdir(
        parents=True, exist_ok=True
    )  # Create the logs directory if it doesn't exist
    file_handler = logging.FileHandler(log_file)
    file_handler.setLevel(logging.INFO)

    # Create a formatter and add it to the handler
    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    file_handler.setFormatter(formatter)

    # Add the handler to the logger
    if not logger.handlers:  # Avoid adding multiple handlers
        logger.addHandler(file_handler)

    return logger


def run_gwemopt(
    gw_alert: GW_alert,
    telescopes: list[str],
    nb_tiles: list[str],
    nside: int,
    path_output: Path,
    observation_strategy: GW_alert.ObservationStrategy,
    logger: logging.Logger,
) -> None:
    """
    Run the gwemopt observation plan.

    Parameters
    ----------
    gw_alert : GW_alert
        The GW_alert object containing the alert information.
    telescopes : list[str]
        List of telescopes to use for the observation plan.
    nside : int
        The nside parameter for the skymap.
    path_output : Path
        Path to the output directory.
    observation_strategy : GW_alert.ObservationStrategy
        The observation strategy to use.
    logger : logging.Logger
        Logger to use for logging. If None, a new logger will be created.

    Returns
    -------
    tuple[Table, Any]
        - tiles_tables: the table of tiles generated by gwemopt
        - galaxies_table: the table of galaxies generated by gwemopt
    """
    logger.info("Flattening the skymap...")
    flat_map = gw_alert.flatten_skymap(nside)
    logger.info("Flat map created. Initializing gwemopt...")

    params, map_struct = init_gwemopt(
        flat_map,
        convert_to_nested=False,
        exposure_time=[30 for _ in range(len(nb_tiles))],
        max_nb_tile=nb_tiles,
        nside=nside,
        do_3d=False,
        do_plot=True,
        do_observability=True,
        do_footprint=True,
        do_movie=True,
        moon_check=False,
        do_reference=True,
    )

    logger.info("gwemopt initialized. Running observation plan...")
    obs_plan_results = gw_alert.run_observation_plan(
        telescopes,
        params,
        map_struct,
        str(path_output),
        observation_strategy,
    )
    logger.info("Observation plan completed.")

    return obs_plan_results


@celery.task(name="gwemopt_task")
def gwemopt_task(
    telescopes: list[str],
    nb_tiles: list[int],
    nside: int,
    path_notice: str,
    path_output: str,
    BBH_threshold: float,
    Distance_threshold: float,
    ErrorRegion_threshold: float,
) -> None:
    """
    Task to process the GCN notice.

    Parameters
    ----------
    telescopes : list[str]
        List of telescopes to use for the observation plan.
    path_output : str
        Path to the output directory.
    path_notice : str
        Path to the GCN notice file.
    BBH_threshold : float
        Threshold for BBH probability.
    Distance_threshold : float
        Threshold for distance cut.
    ErrorRegion_threshold : float
        Threshold for size region cut.
    """
    path_notice = Path(path_notice)
    try:
        with open(path_notice, "rb") as fp:
            json_byte = fp.read()

        gw_alert = GW_alert(
            json_byte,
            BBH_threshold=BBH_threshold,
            Distance_threshold=Distance_threshold,
            ErrorRegion_threshold=ErrorRegion_threshold,
        )  # Configure a logger specific to this task

        logger = setup_task_logger("gwemopt_task_{}".format(gw_alert.event_id))
        logger.info("Starting gwemopt_task...")

        _, _ = run_gwemopt(
            gw_alert,
            telescopes,
            nb_tiles,
            nside=nside,
            path_output=Path(path_output),
            observation_strategy=GW_alert.ObservationStrategy.TILING,
            logger=logger,
        )

        logger.info("GW_alert successfully processed.")
    except Exception as e:
        logger.error(f"An error occurred while processing the task: {e}")
        raise e

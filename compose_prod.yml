services:
  init_volume:
    # This service initializes the volume with the correct permissions
    # to ensure that the GCN stream can write to it.
    # It runs only once and then exits.
    image: busybox
    env_file:
      - .env
    command:
      [
        "sh",
        "-c",
        "chown -R ${PROJECT_UID}:${PROJECT_GID} /shared-tmp /app/logs",
      ]
    volumes:
      - e2e_volume:/shared-tmp
      - ./logs:/app/logs
    restart: "no"

  gcn_stream:
    image: grandma_gcn_app
    env_file:
      - .env
    build:
      context: ./
      dockerfile: dockerfile
      target: base
      args:
        - USR=${USR}
        - USR_GROUP=${USR_GROUP}
        - PROJECT_UID=${PROJECT_UID}
        - PROJECT_GID=${PROJECT_GID}
    user: "${PROJECT_UID}:${PROJECT_GID}"
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - e2e_volume:/shared-tmp
      - ./catalogs:/home/${USR}/code/catalogs
      - ./.env:/home/${USR}/code/.env
    depends_on:
      - celery_worker
      - init_volume
      - db
    command: "python src/grandma_gcn/gcn_stream/stream.py --gcn-config-path gcn_stream_config.toml"

  redis:
    image: redis:6.0.5
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

  celery_worker:
    image: grandma_gcn_app
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - e2e_volume:/shared-tmp
      - ./catalogs:/home/${USR}/code/catalogs
      - ./.env:/home/${USR}/code/.env
    restart: unless-stopped
    command:
      [
        "python",
        "-m",
        "celery",
        "-A",
        "grandma_gcn.worker.celery_app",
        "worker",
        "--loglevel=DEBUG",
        "--concurrency=6",
      ]

  db:
    image: postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
      - ./scripts/init_grandma_gcn_db.sql:/docker-entrypoint-initdb.d/init.sql

  flask_api:
    image: grandma_gcn_app
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    depends_on:
      - db
      - redis
    expose:
      - "5000"
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - e2e_volume:/shared-tmp
      - ./catalogs:/home/${USR}/code/catalogs
      - ./.env:/home/${USR}/code/.env
      - ./gunicorn_conf.py:/home/${USR}/code/gunicorn_conf.py
    command:
      [
        "python",
        "-m",
        "gunicorn",
        "-c",
        "gunicorn_conf.py",
        "grandma_gcn.flask_listener.app_factory:create_app()",
      ]

  # Nginx dynamic reverse proxy
  nginx-proxy:
    container_name: ${NGINX_PROXY_NAME}
    image: jwilder/nginx-proxy:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro

  # Let's Encrypt companion for automatic TLS certificate generation
  nginx-proxy-acme:
    container_name: nginx-proxy-acme-grandma
    image: nginxproxy/acme-companion:latest
    depends_on:
      - nginx-proxy
    environment:
      - NGINX_PROXY_CONTAINER=${NGINX_PROXY_NAME}
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  e2e_volume:
    name: "e2e_volume"
  certs:
  vhost:
  html:
